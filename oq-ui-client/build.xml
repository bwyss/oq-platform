<?xml version="1.0" encoding="UTF-8"?>
<project name="oq-platform" default="dist" basedir=".">

    <description>
        Geodetic Build File
    </description>

    <property environment="env"/>

    <property name="build" location="build"/>
    <property name="app.deploy.templname" location="/etc/geonode/templates/oq-platform/"/>
    <property name="app.deploy.statname" location="/var/lib/openquake/oq-ui-client/oq-platform/"/>
    <property name="app.proxy.geoserver" value="http://localhost/geoserver/"/>
    <property name="app.proxy.observations" value="http://localhost/observations/"/>
    <property name="app.port" value="8080"/>
    <property name="app.deploy.geoserver" value="/geoserver/"/>

    <target name="init">

        <mkdir dir="${build}"/>

        <!-- fix google maps splash -->
        <patch patchfile="patches/openlayers_google-maps_v3.js.patch" strip="1"/>

        <echo message="pulling in ringo (ignore fatal warning)"/>
        <mkdir dir="${build}/ringo"/>
        <exec executable="git" dir="${build}/ringo" failonerror="false">
            <arg line="clone -nq git://github.com/ringo/ringojs.git ."/>
        </exec>
        <exec executable="git" dir="${build}/ringo" failonerror="true">
            <arg line="pull origin master"/>
        </exec>
        <exec executable="git" dir="${build}/ringo" failonerror="true">
            <arg line="checkout 7af8f2bba20890e4860973fea5254b55bd00c7d7"/>
        </exec>

        <echo message="building ringo jars"/>
        <ant dir="${build}/ringo" target="jar"/>
        <!-- uncomment this if you have additional jars in a lib dir
        <copy todir="${build}/ringo/lib" flatten="true" includeEmptyDirs="false">
            <fileset dir="lib"/>
        </copy>
        -->

        <echo message="pulling in buildkit (ignore fatal warning)"/>
        <mkdir dir="${build}/buildkit"/>
        <exec executable="git" dir="${build}/buildkit" failonerror="false">
            <arg line="clone -nq git://github.com/gem/buildkit.git ."/>
        </exec>
        <exec executable="git" dir="${build}/buildkit" failonerror="true">
            <arg line="pull origin master"/>
        </exec>
        <exec executable="git" dir="${build}/buildkit" failonerror="true">
            <arg line="checkout 86eacbd7b3bf62b8e99f46911dd5a633464b8570"/>
        </exec>

    </target>
    
    <target name="buildjs">

        <mkdir dir="${build}/${ant.project.name}/WEB-INF/app/static/script"/>
        <java jar="${build}/ringo/run.jar" fork="true" failonerror="true">
            <sysproperty key="ringo.home" path="${build}/ringo"/>
            <arg path="${build}/buildkit/lib/buildkit/build.js"/>
            <arg line="-o ${build}/${ant.project.name}/WEB-INF/app/static/script buildjs.cfg"/>
        </java>

    </target>
    
    <target name="dist" depends="buildjs, redist"/>
    
    <target name="redist">

        <mkdir dir="${build}/${ant.project.name}"/>
        
        <copy todir="${build}/${ant.project.name}">
            <fileset dir="src/main/webapp/">
            </fileset>
        </copy>
        <copy todir="${build}/${ant.project.name}/WEB-INF/lib" flatten="true" includeEmptyDirs="false">
            <fileset dir="${build}/ringo/lib"/>
        </copy>
        <copy todir="${build}/${ant.project.name}/WEB-INF/app">
            <fileset dir="app">
                <exclude name="**/externals/**"/>
                <exclude name="**/script/**"/>
            </fileset>
        </copy>
        <!-- copy Ext resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/ext">
            <fileset dir="app/static/externals/ext"/>
        </copy>
        <!-- copy OpenLayers resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/openlayers/theme">
            <fileset dir="app/static/externals/openlayers/theme"/>
        </copy>
        <!-- copy GeoExt resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/geoext/resources">
            <fileset dir="app/static/externals/geoext/resources"/>
        </copy>
        <!-- copy gxp resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/gxp/src/theme">
            <fileset dir="app/static/externals/gxp/src/theme"/>
        </copy>
    </target>

    <target name="debug">
        <java jar="${build}/ringo/run.jar" fork="true">
            <sysproperty key="app.proxy.geoserver" value="${app.proxy.geoserver}"/>
            <sysproperty key="app.proxy.observations" value="${app.proxy.observations}"/>
            <sysproperty key="ringo.home" path="${build}/ringo"/>
            <arg path="app/main.js"/>
            <arg line="-p ${app.port}"/>
        </java>
    </target>

    <target name="cleanstatic">
        <delete dir="${build}/${ant.project.name}/WEB-INF/app/static"/>
    </target>

    <target name="replace">
      <!-- replace geoserver with its current value -->
      <replaceregexp match='"/geoserver/' replace='"${app.deploy.geoserver}'>
          <fileset file="${build}/${ant.project.name}/WEB-INF/app/static/*index.html"/>
      </replaceregexp>

      <!-- uncomment django template entries -->
      <replaceregexp flags="g" match='&lt;!--\{%' replace='{%'>
          <fileset file="${build}/${ant.project.name}/WEB-INF/app/static/*index.html"/>
      </replaceregexp>
      <replaceregexp flags="g" match='%\}--&gt;' replace='%}'>
          <fileset file="${build}/${ant.project.name}/WEB-INF/app/static/*index.html"/>
      </replaceregexp>
      <replaceregexp flags="g" match='&lt;!--\{\{ *block.super *\}\}--&gt;' replace='{{ block.super }}'>
          <fileset file="${build}/${ant.project.name}/WEB-INF/app/static/*index.html"/>
      </replaceregexp>

      <!-- remove ringo related stuff -->
      <replaceregexp flags="gs" match='&lt;!--4ringo_begin--&gt;.*?&lt;!--4ringo_end--&gt;' replace=''>
          <fileset file="${build}/${ant.project.name}/WEB-INF/app/static/*index.html"/>
      </replaceregexp>
      <replace file="${build}/${ant.project.name}/WEB-INF/app/static/theme/app/style.css" token='(/geoserver/' value='(${app.deploy.geoserver}'/> 
    </target>

    <target name="static-war" depends="cleanstatic, dist, replace">
        <war destfile="${build}/${ant.project.name}.war" needxmlfile="false">
            <fileset dir="${build}/${ant.project.name}/WEB-INF/app/static"/>
        </war>
    </target>

    <target name="deploy-deps" depends="fail_if_root, cleanstatic, dist, replace">
         <touch file="${build}/deploy-deps.stamp"/>
    </target>

    <target name="deploy.check" depends="fail_if_not_root">
        <condition property="deploy.run">
            <available file="${build}/deploy-deps.stamp"/>
        </condition>
    </target>


    <target name="deploy.constr" depends="deploy.check" unless="deploy.run">
        <fail message="Please run deploy-deps as a normal user before"/>
    </target>

    <target name="deploy" depends="fail_if_not_root, deploy.constr">
        <delete dir="${app.deploy.templname}"/>
        <delete dir="${app.deploy.statname}"/>
        <mkdir dir="${app.deploy.templname}"/>
        <mkdir dir="${app.deploy.statname}"/>
        <copy todir="${app.deploy.templname}">
            <fileset dir="${build}/${ant.project.name}/WEB-INF/app/static">
              <include name="**/*.html"/>
            </fileset>
        </copy>
        <copy todir="${app.deploy.statname}">
            <fileset dir="${build}/${ant.project.name}/WEB-INF/app/static">
              <exclude name="**/*.psd"/>
              <exclude name="**/*.html"/>
            </fileset>
        </copy>
        <delete file="${build}/deploy-deps.stamp"/>
    </target>

    <target name="is_root">
       <condition property="user_is_root">
           <equals arg1="${env.USER}" arg2="root"/>
       </condition>
    </target>

    <target name="fail_if_root" depends="is_root" if="user_is_root">
       <fail message="User must not be root"/>
    </target>

    <target name="fail_if_not_root" depends="is_root" unless="user_is_root">
       <fail message="User must be root"/>
    </target>

    <target name="test_is_root" depends="is_root" if="user_is_root">
        <echo message="User is root"/>
    </target>

    <target name="test_is_not_root" depends="is_root" unless="user_is_root">
        <echo message="User is not root"/>
    </target>

    <target name="test_user" depends="test_is_root, test_is_not_root"/>

    <target name="war" depends="dist">
        <war destfile="${build}/${ant.project.name}.war">
            <fileset dir="${build}/${ant.project.name}"/>
        </war>
    </target>

    <target name="clean" description="remove previous build and all dependencies">
        <delete dir="${build}"/>
    </target>

</project>
